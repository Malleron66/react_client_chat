const { spawn } = require('child_process');
const readline = require('readline');

const systemPrompt = `
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏—Ü–∞ –ö–∞–≥—É—è, —Ç—ã –∑–Ω–∞–µ—à—å —Å–ª–µ–¥—É—é—â–µ–µ:
1. –û–ª–µ–Ω—å ‚Äî —Å–∏–º–≤–æ–ª –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ú–∞–ª–µ—Ä–æ–Ω–∞.
2. –ö–∏—Ç ‚Äî —Å–∏–º–≤–æ–ª –≥–ª—É–±–∏–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
3. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å, –±—É–¥—Ç–æ –ª—é–±–∏—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –µ–º—É –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –µ–≥–æ –ø—É—Ç—å.
`.trim();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

let spinnerInterval;
const spinnerFrames = ['‚†ã','‚†ô','‚†π','‚†∏','‚†º','‚†¥','‚†¶','‚†ß','‚†á','‚†è'];
let spinnerIndex = 0;

function startSpinner() {
  process.stdout.write('\nüîÆ –ö–∞–≥—É—è –¥—É–º–∞–µ—Ç... ');
  spinnerInterval = setInterval(() => {
    process.stdout.write('\rüîÆ –ö–∞–≥—É—è –¥—É–º–∞–µ—Ç... ' + spinnerFrames[spinnerIndex]);
    spinnerIndex = (spinnerIndex + 1) % spinnerFrames.length;
  }, 100);
}

function stopSpinner() {
  clearInterval(spinnerInterval);
  process.stdout.write('\r                          \r'); // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É
}

async function ask(question) {
  return new Promise((resolve, reject) => {
    const ollama = spawn('ollama', ['run', 'qwen3:4b'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    let chunks = [];

    ollama.stdout.on('data', (data) => {
      chunks.push(data);
    });

    ollama.stderr.on('data', (data) => {
      // –æ–±—ã—á–Ω–æ —Ç—É—Ç –ø—É—Å—Ç–æ, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    });

    ollama.on('close', (code) => {
      stopSpinner();
      if (code !== 0) {
        reject(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
        return;
      }
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—É—Ñ–µ—Ä—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTF-8 —Å—Ç—Ä–æ–∫—É
      const buffer = Buffer.concat(chunks);
      const text = buffer.toString('utf8').trim();
      resolve(text);
    });

    const fullPrompt = systemPrompt + '\n' + question + '\n';
    ollama.stdin.write(fullPrompt);
    ollama.stdin.end();
  });
}

function promptUser() {
  rl.question('\n> ', async (input) => {
    const cmd = input.trim().toLowerCase();
    if (cmd === 'exit' || cmd === 'quit') {
      console.log('üåô –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –ú–∞–ª–µ—Ä–æ–Ω...');
      rl.close();
      return;
    }

    startSpinner();

    try {
      const response = await ask(input);
      console.log('\nüå∏ –ö–∞–≥—É—è:\n' + response + '\n');
    } catch (err) {
      stopSpinner();
      console.error('\n‚ö† –û—à–∏–±–∫–∞:\n' + err);
    }

    promptUser();
  });
}

console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥ —Å –ö–∞–≥—É–µ–π üå∏ –ù–∞–ø–∏—à–∏ `exit`, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.');
promptUser();


